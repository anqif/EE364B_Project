import numpy as np
import scipy.linalg
import matplotlib.pyplot as plt
from cvxpy import *

np.random.seed(1)
p_num = 5
# S = np.random.randint(0, 2, size = (5,5))
S = np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
			  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
			  [0, 0, 1, 0, 0, 0, 0, 1, 0, 0],
			  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
			  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
			  [0, 0, 1, 0, 0, 0, 0, 1, 0, 0],
			  [0, 0, 0, 1, 0, 0, 1, 0, 0, 0],
			  [0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
			  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
			  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])
k,l = S.shape
n = np.prod(S.shape)
S_vec = S.flatten()   # Flatten into vector
S_vec = 2*S_vec - 1   # Normalize to {-1,1}

# Generate light wavelengths
v = np.arange(n)
p_light = []
for i in range(p_num):
	data = np.random.randn(n,2)
	comp = np.apply_along_axis(lambda args: [complex(*args)], 1, data)
	bessel = scipy.special.jv(1,v).reshape((n,1))
	p_light += [comp + bessel]
Phis = [np.asmatrix(scipy.linalg.circulant(p)) for p in p_light]

# Solve convex relaxation
m = Variable((n,1))
M = Variable((n,n), symmetric = True)   # M = mm^T
I_high = Variable()
I_low = Variable()

one = np.array([[1]])
H_mat = bmat([[one, m.T], [m, M]])
I = sum([diag(real(Phi.H*M*Phi)) for Phi in Phis])

obj = I_high - I_low
cons = [diag(M) == 1, H_mat >> 0, I[S_vec == 1] >= I_high, I[S_vec == -1] <= I_low, I_high >= I_low]
prob = Problem(Maximize(obj), cons)
prob.solve("MOSEK")
print("Status: {}".format(prob.status))

# Real mask must be binary
m_bin = np.sign(m.value)
M_bin = m_bin.dot(m_bin.T)
I_bin = sum([np.diag(Phi.H.dot(M_bin).dot(Phi)) for Phi in Phis])

# Retrieve solution
I_sol = np.real(I_bin)
S_sol = np.reshape(I_sol, (k,l))   # Reshape into 2-D image
print("MSE in Substrate: {}".format(np.linalg.norm(S - S_sol)**2/n))

# Display resulting substrate
f, axarr = plt.subplots(1,2)
axarr[0].imshow(S, cmap = "Greys", interpolation = "nearest")
axarr[0].set_title("Desired Substrate")
axarr[1].imshow(S_sol, cmap = "Greys", interpolation = "nearest")
axarr[1].set_title("Solution Substrate")
plt.show()
